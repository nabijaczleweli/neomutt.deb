From: =?utf-8?b?0L3QsNCx?= <nabijaczleweli@nabijaczleweli.xyz>
Date: Tue, 15 Aug 2023 03:19:25 +0200
Subject: mutt_file_sanitize_filename: actually replace characters
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 8bit

The documentation says "characters" but it operates on bytes. This means
that Рахунок.pdf and Ziemiańska.pdf get turned into ______________.pdf
and Ziemia__ska.pdf, which is, respectively, very useful, and offensive
to me personally.

Instead, keep the old logic for bytes <=0x7F to get rid of quotes or
slashes or whatever, but allow all other characters, since they won't
interfere with whatever mangling may happen to the path.

Upstream: 123aaa0c8a34b7edbfe74b2c7d462d527c8b3d6e
Upstream: #3976
---
 mutt/file.c                             | 33 +++++++++++++++++++++++++++++----
 test/file/mutt_file_sanitize_filename.c | 16 ++++++++++++++++
 2 files changed, 45 insertions(+), 4 deletions(-)

diff --git a/mutt/file.c b/mutt/file.c
index 3be2e9d..6af1528 100644
--- a/mutt/file.c
+++ b/mutt/file.c
@@ -39,8 +39,10 @@
 #include <sys/stat.h>
 #include <unistd.h>
 #include <utime.h>
+#include <wchar.h>
 #include "file.h"
 #include "buffer.h"
+#include "charset.h"
 #include "date.h"
 #include "logging2.h"
 #include "memory.h"
@@ -55,7 +57,7 @@
 /// These characters must be escaped in regular expressions
 static const char RxSpecialChars[] = "^.[$()|*+?{\\";
 
-/// Set of characters that are safe to use in filenames
+/// Set of characters <=0x7F that are safe to use in filenames
 const char FilenameSafeChars[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+@{}._-:%/";
 
 #define MAX_LOCK_ATTEMPTS 5
@@ -667,10 +669,33 @@ void mutt_file_sanitize_filename(char *path, bool slash)
   if (!path)
     return;
 
-  for (; *path; path++)
+  size_t size = strlen(path);
+
+  wchar_t c;
+  mbstate_t mbstate = { 0 };
+  for (size_t consumed; size && (consumed = mbrtowc(&c, path, size, &mbstate));
+       size -= consumed, path += consumed)
   {
-    if ((slash && (*path == '/')) || !strchr(FilenameSafeChars, *path))
-      *path = '_';
+    switch (consumed)
+    {
+      case ICONV_ILLEGAL_SEQ:
+        mbstate = (mbstate_t){ 0 };
+        consumed = 1;
+        memset(path, '_', consumed);
+        break;
+
+      case ICONV_BUF_TOO_SMALL:
+        consumed = size;
+        memset(path, '_', consumed);
+        break;
+
+      default:
+        if ((slash && (c == L'/')) || ((c <= 0x7F) && !strchr(FilenameSafeChars, c)))
+        {
+          memset(path, '_', consumed);
+        }
+        break;
+    }
   }
 }
 
diff --git a/test/file/mutt_file_sanitize_filename.c b/test/file/mutt_file_sanitize_filename.c
index 1b657a2..e16e2b9 100644
--- a/test/file/mutt_file_sanitize_filename.c
+++ b/test/file/mutt_file_sanitize_filename.c
@@ -24,8 +24,10 @@
 #include "config.h"
 #include "acutest.h"
 #include <stddef.h>
+#include <locale.h>
 #include <stdbool.h>
 #include "mutt/lib.h"
+#include "test_common.h"
 
 void test_mutt_file_sanitize_filename(void)
 {
@@ -35,4 +37,18 @@ void test_mutt_file_sanitize_filename(void)
     mutt_file_sanitize_filename(NULL, false);
     TEST_CHECK_(1, "mutt_file_sanitize_filename(NULL, false)");
   }
+
+  {
+    setlocale(LC_CTYPE, "C.UTF-8");
+    char buf[] = "żupan/tłusty";
+    mutt_file_sanitize_filename(buf, false);
+    TEST_CHECK_STR_EQ(buf, "żupan/tłusty");
+  }
+
+  {
+    setlocale(LC_CTYPE, "C.UTF-8");
+    char buf[] = "żupan/t\xC5\xC5ust\xC5";
+    mutt_file_sanitize_filename(buf, false);
+    TEST_CHECK_STR_EQ(buf, "żupan/t__ust_");
+  }
 }
