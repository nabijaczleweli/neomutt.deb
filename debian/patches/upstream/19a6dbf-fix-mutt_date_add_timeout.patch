From 19a6dbfe4bb2b6ea8b8f102d012b394d6a9a61a1 Mon Sep 17 00:00:00 2001
From: Richard Russon <rich@flatcap.org>
Date: Sat, 4 Apr 2020 22:37:26 +0100
Subject: [PATCH] fix: mutt_date_add_timeout()

Change the timeout parameter to be a `time_t`.
On the x32 arch, `time_t` is 64-bit and `long` is 32-bit.

This meant that one of the 64-bit test timeouts was being truncated to
32-bits making the test fail.

Fixes: #2237
---
 mutt/date.c | 2 +-
 mutt/date.h | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/mutt/date.c b/mutt/date.c
index d0e2b999f6..e630c82636 100644
--- a/mutt/date.c
+++ b/mutt/date.c
@@ -636,7 +636,7 @@ time_t mutt_date_parse_imap(const char *s)
  *
  * This will truncate instead of overflowing.
  */
-time_t mutt_date_add_timeout(time_t now, long timeout)
+time_t mutt_date_add_timeout(time_t now, time_t timeout)
 {
   if (timeout < 0)
     return now;
diff --git a/mutt/date.h b/mutt/date.h
index dc8e45c7e8..8dd49c874b 100644
--- a/mutt/date.h
+++ b/mutt/date.h
@@ -47,7 +47,7 @@ struct Tz
   bool zoccident;         ///< True if west of UTC, False if East
 };
 
-time_t    mutt_date_add_timeout(time_t now, long timeout);
+time_t    mutt_date_add_timeout(time_t now, time_t timeout);
 int       mutt_date_check_month(const char *s);
 time_t    mutt_date_epoch(void);
 uint64_t  mutt_date_epoch_ms(void);
